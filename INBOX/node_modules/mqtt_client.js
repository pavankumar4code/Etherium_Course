const mqtt = require('mqtt')
const client = mqtt.connect('mqtt://10.20.201.81')
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:30305"));

/* Register contract Details */
var regAddr = "0xefb4ffddc7684f2e3a485a5e2790885b67bab848";

var regAbi = [{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"lookupTable","outputs":[{"name":"scName","type":"string"},{"name":"subject","type":"address"},{"name":"object","type":"address"},{"name":"creator","type":"address"},{"name":"scAddress","type":"address"},{"name":"abi","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_methodName","type":"string"},{"name":"_scname","type":"string"},{"name":"_subject","type":"address"},{"name":"_object","type":"address"},{"name":"_creator","type":"address"},{"name":"_scAddress","type":"address"}],"name":"methodRegister","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_methodName","type":"string"},{"name":"_scName","type":"string"}],"name":"methodScNameUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_methodName","type":"string"},{"name":"_abi","type":"string"}],"name":"methodAbiUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_methodName","type":"string"}],"name":"getContractAddr","outputs":[{"name":"_scAddress","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_methodName","type":"string"},{"name":"_scAddress","type":"address"}],"name":"methodAcAddressUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_oldName","type":"string"},{"name":"_newName","type":"string"}],"name":"methodNameUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_str","type":"string"}],"name":"stringToBytes32","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_methodName","type":"string"}],"name":"getContractAbi","outputs":[{"name":"_abi","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"methodDelete","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}];


/* Registered Method Name */
var methodName = "Sensor1";
var register = web3.eth.contract(regAbi).at(regAddr);
//var accAddr = register.getContractAddr(methodName);
var accAddr = "0x444dce122514dbd520d6a68d067e5e07b0f076c6";

var accAbi = JSON.parse('[{"constant":true,"inputs":[],"name":"subject","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"object","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_jc","type":"address"}],"name":"setJC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"}],"name":"getPolicy","outputs":[{"name":"_permission","type":"string"},{"name":"_minInterval","type":"uint256"},{"name":"_threshold","type":"uint256"},{"name":"_ToLR","type":"uint256"},{"name":"_NoFR","type":"uint256"},{"name":"_res","type":"bool"},{"name":"_errcode","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"jc","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"}],"name":"policyDelete","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"},{"name":"_newThreshold","type":"uint256"}],"name":"thresholdUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_resource","type":"string"}],"name":"getTimeofUnblock","outputs":[{"name":"_penalty","type":"uint256"},{"name":"_timeOfUnblock","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"},{"name":"_permission","type":"string"},{"name":"_minInterval","type":"uint256"},{"name":"_threshold","type":"uint256"}],"name":"policyAdd","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"},{"name":"_newMinInterval","type":"uint256"}],"name":"minIntervalUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"},{"name":"_time","type":"uint256"}],"name":"accessControl","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_str","type":"string"}],"name":"stringToBytes32","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_resource","type":"string"},{"name":"_action","type":"string"},{"name":"_newPermission","type":"string"}],"name":"policyUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"deleteACC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_subject","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_errmsg","type":"string"},{"indexed":false,"name":"_result","type":"bool"},{"indexed":false,"name":"_time","type":"uint256"},{"indexed":false,"name":"_penalty","type":"uint256"}],"name":"ReturnAccessResult","type":"event"}]');


var previousTxHash = 0;
var currentTxHash = 0;
var myACC = web3.eth.contract(accAbi).at(accAddr);
var myEvent = myACC.ReturnAccessResult({fromBlock: 0, toBlock: 'latest'});


function CheckResourceAccess(resource, action){
	var currentTime = new Date().getTime()/1000;
	currentTxHash = myACC.accessControl.sendTransaction(resource, action, currentTime, {from: web3.eth.accounts[1], gas:3000000});
	
	myEvent.watch(function(err, result){
		
		if(!err){
		
			if(previousTxHash != result.transactionHash && currentTxHash == result.transactionHash){//avoid dupicate event captured
				
				console.log("Contract: "+result.address);
				
				console.log("Block Number: " + result.blockNumber);
				
				console.log("Tx Hash: " + result.transactionHash);
				
				console.log("Block Hash: "+ result.blockHash);
				
				console.log("Time: " + result.args._time.toNumber());
				
				console.log("Message: " + result.args._errmsg);
				console.log("Result: " + result.args._result);
			
				if (result.args._penalty > 0)
					console.log("Requests are blocked for " + result.args._penalty + "minutes!");
				console.log('\n');
				previousTxHash = result.transactionHash;

				}
			}
		
		});

		
}



client.on('connect', () => {
	console.log('Connection established\n')
  	client.subscribe('RPI/1/getStatus')
})

client.on('message', (topic, message)=>{
	console.log('Recieved message: topic: %s\nMessage: %s\n', topic, message)
	
	var json_obj = JSON.parse(message)
	console.log('Resource Request: %s', json_obj.resource)	
	console.log('Resource Action: %s', json_obj.action)	
	CheckResourceAccess(json_obj.resource, json_obj.action)

})
